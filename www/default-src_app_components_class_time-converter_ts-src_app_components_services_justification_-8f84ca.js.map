{"version":3,"file":"default-src_app_components_class_time-converter_ts-src_app_components_services_justification_-8f84ca.js","mappings":";;;;;;;;;;;;;AAAO,MAAM,aAAa;IACxB,sDAAsD;IACtD,gDAAgD;IAChD,iBAAiB;IACjB,eAAe;IACf,cAAc;IACP,aAAa,CAAC,cAAc,EAAE,OAAO;QAC1C,mCAAmC;QACnC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;QACxC,IAAI,MAAM,GAAG;YACX,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;SACL,CAAC;QACF,IAAI,IAAI,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3B,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;QACvB,IAAI,IAAI,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;QACxB,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAI,OAAO,IAAI,CAAC,EAAE;YAChB,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC;YAC3C,OAAO,IAAI,CAAC;SACb;QACD,IAAI,OAAO,IAAI,CAAC,EAAE;YAChB,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,GACN,IAAI;YACJ,GAAG;YACH,KAAK;YACL,GAAG;YACH,IAAI;YACJ,GAAG;YACH,IAAI;YACJ,GAAG;YACH,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,GAAG;YACH,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,0CAA0C;IAC1C,QAAQ,CAAC,KAAa,EAAE,KAAa;QACnC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,OAAO,QAAQ,IAAI,EAAE,EAAE;YACrB,OAAO,EAAE,CAAC;YACV,QAAQ,GAAG,QAAQ,GAAG,EAAE,CAAC;SAC1B;QACD,OAAO,OAAO,IAAI,EAAE,EAAE;YACpB,KAAK,EAAE,CAAC;YACR,OAAO,GAAG,OAAO,GAAG,EAAE,CAAC;SACxB;QAED,OAAO,CACL,KAAK;YACL,GAAG;YACH,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,GAAG;YACH,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAC5B,CAAC;IACJ,CAAC;IACD,2CAA2C;IAC3C,aAAa,CAAC,KAAa,EAAE,KAAa;QACxC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,OAAO,QAAQ,GAAG,CAAC,EAAE;YACnB,OAAO,EAAE,CAAC;YACV,QAAQ,GAAG,EAAE,GAAG,QAAQ,CAAC;SAC1B;QACD,OAAO,OAAO,GAAG,CAAC,EAAE;YAClB,KAAK,EAAE,CAAC;YACR,OAAO,GAAG,EAAE,GAAG,OAAO,CAAC;SACxB;QAED,OAAO,CACL,KAAK;YACL,GAAG;YACH,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,GAAG;YACH,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAC5B,CAAC;IACJ,CAAC;IACD,QAAQ,CAAC,KAAa,EAAE,KAAa;QACnC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,MAAM,GACV,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK;YAC3B,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;YACzB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,MAAM,GACV,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK;YAC3B,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;YACzB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtB,IAAI,MAAM,GAAG,MAAM,EAAE;YACnB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,MAAM,GAAG,MAAM,EAAE;YACnB,OAAO,CAAC,CAAC,CAAC;SACX;QACD,IAAI,MAAM,IAAI,MAAM,EAAE;YACpB,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,OAAO,QAAQ,CACb,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAC5D,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;;;;;;;;ACjIoC;;;AAI9B,MAAM,WAAW;IActB,qEAAqE;IACrE,wCAAwC;IACxC,YAA6B,GAAqB;QAArB,QAAG,GAAH,GAAG,CAAkB;QAflD,oEAAoE;QACpE,yEAAyE;QACzE,UAAK,GAAuB,IAAI,CAAC;QACjC,oEAAoE;QACpE,yEAAyE;QACzE,cAAS,GAAuB,IAAI,CAAC;QAWnC,wEAAwE;QACxE,wCAAwC;QACxC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAO,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE,CACpE,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACvC,CAAC;IACJ,CAAC;IAED,4FAA4F;IAC5F,cAAc,CAAC,IAAU,EAAE,MAAc;QACvC,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC;YAC5C,IAAI;gBACF,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;gBACnB,MAAM,IAAI,mBAAK,EAAE,IAAK,IAAI,CAAE,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBACzB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;iBAC3B;gBACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClC,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACtD,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC;oBAClD,eAAe,EAAE,IAAI,CAAC,eAAe;iBACtC,CAAC,CAAC;gBAEH,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACvB;QACH,CAAC,EAAC,CAAC;IACL,CAAC;IACD,yFAAyF;IACzF,iCAAiC;IACjC,gBAAgB,CAAC,IAAS;QACxB,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC;YAC5C,IAAI;gBACF,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;gBACnB,MAAM,IAAI,mBAAK,EAAE,IAAK,IAAI,CAAE,CAAC;gBAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC9D,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACvB;QACH,CAAC,EAAC,CAAC;IACL,CAAC;IACD,mEAAmE;IACnE,QAAQ;QACN,kCAAkC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe;aAC9B,eAAe,EAAE;aACjB,IAAI,CAAC,mDAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAU,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;IACD,gGAAgG;IAChG,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAO,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE;YACxE,OAAO,GAAG;iBACP,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;iBACvB,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC;iBAChC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,gCAAgC;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB;aACtC,eAAe,EAAE;aACjB,IAAI,CAAC,mDAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAU,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;IACD,OAAO,CAAC,EAAU;QAChB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAO,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE;YACxE,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QACH,gCAAgC;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB;aACtC,eAAe,EAAE;aACjB,IAAI,CAAC,mDAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAU,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;;sEAvFU,WAAW;4GAAX,WAAW,WAAX,WAAW,mBADE,MAAM;;;;;;;;;;;;;;;;;;;;;ACDK;;;;AAI9B,MAAM,oBAAoB;IAc/B,4FAA4F;IAC5F,gFAAgF;IAChF,YACmB,GAAqB,EAC9B,OAAoB;QADX,QAAG,GAAH,GAAG,CAAkB;QAC9B,YAAO,GAAP,OAAO,CAAa;QAE5B,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CACjD,iBAAiB,EACjB,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CACtC,CAAC;IACJ,CAAC;IAED,gDAAgD;IAChD,iBAAiB,CACf,IAAmB,EACnB,MAAc,EACd,KAAa,EACb,KAAa;QAEb,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC;YAC5C,IAAI;gBACF,MAAM,EAAE,GAAG,MAAM,CAAC;gBAClB,MAAM,MAAM,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,MAAM,IAAI,iCAAK,EAAE,IAAK,IAAI,KAAE,eAAe,EAAE,KAAK,GAAG,KAAK,GAAE,CAAC;gBAC7D,MAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC/D,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACvB;QACH,CAAC,EAAC,CAAC;IACL,CAAC;IACD,6CAA6C;IAC7C,mBAAmB,CACjB,aAA4B,EAC5B,QAAc;QAEd,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC;YAC5C,IAAI;gBACF,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC;gBACpD,MAAM,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAC;gBAC7B,MAAM,YAAY,iCAAK,EAAE,IAAK,aAAa,KAAE,OAAO,GAAE,CAAC;gBACvD,MAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBACvE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAC1C,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACvB;QACH,CAAC,EAAC,CAAC;IACL,CAAC;IACD,+EAA+E;IAC/E,QAAQ,CAAC,IAAmB,EAAE,KAAa,EAAE,IAAa;QACxD,IAAI;YACF,MAAM,eAAe,GAAG,KAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,KAAI,IAAI,CAAC;YACzC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,eAAe,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YACjE,IAAI,KAAK,IAAI,EAAE,EAAE;gBACf,IAAI,IAAI,EAAE;oBACR,MAAM,IAAI,GAAG;wBACX,EAAE,EAAE,IAAI,CAAC,UAAU;wBACnB,UAAU,EAAE,KAAK,GAAG,KAAK;qBAC1B,CAAC;oBACF,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;iBACrC;aACF;SACF;QAAC,OAAO,KAAK,EAAE,GAAE;IACpB,CAAC;IACD,iFAAiF;IACjF,QAAQ,CAAC,IAAmB;QAC1B,IAAI;YACF,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,EAAE;gBACxB,MAAM,IAAI,GAAG;oBACX,EAAE,EAAE,IAAI,CAAC,UAAU;oBACnB,eAAe,EAAE,UAAU;iBAC5B,CAAC;gBACF,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aACrC;YACD,IAAI,IAAI,CAAC,IAAI,IAAI,aAAa,EAAE;gBAC9B,MAAM,IAAI,GAAG;oBACX,EAAE,EAAE,IAAI,CAAC,UAAU;oBACnB,UAAU,EAAE,UAAU;iBACvB,CAAC;gBACF,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aACrC;YACD,MAAM,eAAe,GAAG,KAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,KAAI,IAAI,CAAC;YACzC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,eAAe,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;SACpE;QAAC,OAAO,KAAK,EAAE,GAAE;IACpB,CAAC;IACD,yEAAyE;IACzE,iBAAiB;QACf,wEAAwE;QAExE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,wBAAwB;aAChD,eAAe,EAAE;aACjB,IAAI,CACH,mDAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACd,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAmB,CAAC,CAC1D,CACF,CAAC;IACN,CAAC;IACD,oEAAoE;IACpE,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CACrD,iBAAiB,EACjB,CAAC,GAAG,EAAE,EAAE;YACN,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACvE,CAAC,CACF,CAAC;QACF,gCAAgC;QAChC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,4BAA4B;aACxD,eAAe,EAAE;aACjB,IAAI,CACH,mDAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACd,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAmB,CAAC,CAC1D,CACF,CAAC;IACN,CAAC;;wFAjIU,oBAAoB;qHAApB,oBAAoB,WAApB,oBAAoB,mBADP,MAAM","sources":["./src/app/components/class/time-converter.ts","./src/app/components/services/data.service.ts","./src/app/components/services/justification.service.ts"],"sourcesContent":["export class TimeConverter {\n  //Convierte fecha y hora de formato Timestamp a String\n  //el idFecha indica si la funcion deve devolver:\n  //0: hora y fecha\n  //1: solo fecha\n  //2: solo hora\n  public timeConverter(UNIX_timestamp, idFecha) {\n    //var { seconds } = UNIX_timestamp;\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = [\n      '01',\n      '02',\n      '03',\n      '04',\n      '05',\n      '06',\n      '07',\n      '08',\n      '09',\n      '10',\n      '11',\n      '12',\n    ];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = a.getHours();\n    var min = '0' + a.getMinutes();\n    var sec = '0' + a.getSeconds();\n    if (idFecha == 1) {\n      var time = date + '/' + month + '/' + year;\n      return time;\n    }\n    if (idFecha == 2) {\n      var time = hour + ':' + min.substr(-2) + ':' + sec.substr(-2);\n      return time;\n    }\n    var time =\n      date +\n      '/' +\n      month +\n      '/' +\n      year +\n      ' ' +\n      hour +\n      ':' +\n      min.substr(-2) +\n      ':' +\n      sec.substr(-2);\n    return time;\n  }\n  //función para sumar 2 horas (hora1+hora2)\n  addHoras(hora1: String, hora2: String): string {\n    const hora1S = hora1.split(':');\n\n    const hora2S = hora2.split(':');\n\n    let segundoR = parseInt(hora1S[2]) + parseInt(hora2S[2]);\n    let horaR = parseInt(hora1S[0]) + parseInt(hora2S[0]);\n    let minutoR = parseInt(hora1S[1]) + parseInt(hora2S[1]);\n    while (segundoR >= 60) {\n      minutoR++;\n      segundoR = segundoR - 60;\n    }\n    while (minutoR >= 60) {\n      horaR++;\n      minutoR = minutoR - 60;\n    }\n\n    return (\n      horaR +\n      ':' +\n      ('0' + minutoR).substr(-2) +\n      ':' +\n      ('0' + segundoR).substr(-2)\n    );\n  }\n  //función para restar 2 horas (hora1-hora2)\n  subtractHoras(hora1: string, hora2: string): string {\n    const hora1S = hora1.split(':');\n\n    const hora2S = hora2.split(':');\n\n    let horaR = parseInt(hora1S[0]) - parseInt(hora2S[0]);\n    let segundoR = parseInt(hora1S[2]) - parseInt(hora2S[2]);\n    let minutoR = parseInt(hora1S[1]) - parseInt(hora2S[1]);\n    while (segundoR < 0) {\n      minutoR--;\n      segundoR = 60 + segundoR;\n    }\n    while (minutoR < 0) {\n      horaR--;\n      minutoR = 60 + minutoR;\n    }\n\n    return (\n      horaR +\n      ':' +\n      ('0' + minutoR).substr(-2) +\n      ':' +\n      ('0' + segundoR).substr(-2)\n    );\n  }\n  compareH(hora1: String, hora2: String): number {\n    const hora1S = hora1.split(':');\n    const hora2S = hora2.split(':');\n    const horas1 =\n      parseInt(hora1S[0]) * 10000 +\n      parseInt(hora1S[1]) * 100 +\n      parseInt(hora1S[2]);\n    const horas2 =\n      parseInt(hora2S[0]) * 10000 +\n      parseInt(hora2S[1]) * 100 +\n      parseInt(hora2S[2]);\n\n    if (horas1 > horas2) {\n      return 1;\n    }\n    if (horas1 < horas2) {\n      return -1;\n    }\n    if (horas1 == horas2) {\n      return 0;\n    }\n  }\n\n  convertString(time: number): string {\n    return String(time).substr(-6, 2) + ':' + String(time).substr(-4, 2);\n  }\n\n  convertNumber(time: string): number {\n    return parseInt(\n      String(time).substr(-5, 2) + String(time).substr(-2) + '00'\n    );\n  }\n}\n","import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  AngularFirestore,\r\n  AngularFirestoreCollection,\r\n} from '@angular/fire/firestore';\r\nimport { map } from 'rxjs/operators';\r\nimport { Data } from '../../models/data.interface';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataService {\r\n  //observable en donde estarán los datos obtenidos por CloudFirestore\r\n  //Se almacenarán todos los registros de usuarios (para rol Administrador)\r\n  data$: Observable<Data[]> = null;\r\n  //observable en donde estarán los datos obtenidos por CloudFirestore\r\n  //Se almacenarán los registros del usuario autorizado (para rol Empleado)\r\n  dataById$: Observable<Data[]> = null;\r\n\r\n  //se crea un objeto para gestionar el acceso al Cloud Firestore\r\n  private datasCollection: AngularFirestoreCollection<Data>;\r\n  //se crea un objeto para gestionar el acceso al Cloud Firestore\r\n  //se realizará una consulta de registros en base al id de usuario\r\n  private datasCollectionById: AngularFirestoreCollection<Data>;\r\n\r\n  //Constructor: se declara el servicio AngularFirestore para acceder a\r\n  //las caracteristicas de Cloud Firestore\r\n  constructor(private readonly afs: AngularFirestore) {\r\n    //se define el nombre de la colección que se leerá en el Cloud Firestore\r\n    //se aplica un filtro de orden por fecha\r\n    this.datasCollection = this.afs.collection<Data>('registros', (ref) =>\r\n      ref.orderBy('hora', 'desc').limit(300)\r\n    );\r\n  }\r\n\r\n  //funcion que editará el campo justificaciones del registro cuando se crea una justificación\r\n  onEditDataJust(edit: Data, idJust: string): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const id = edit.id;\r\n        const data = { id, ...edit };\r\n        if (!edit.justificaciones) {\r\n          edit.justificaciones = [];\r\n        }\r\n        edit.justificaciones.push(idJust);\r\n        const result = this.datasCollection.doc(id).set(data);\r\n        const result2 = this.datasCollection.doc(id).update({\r\n          justificaciones: edit.justificaciones,\r\n        });\r\n\r\n        resolve(result);\r\n      } catch (error) {\r\n        reject(error.message);\r\n      }\r\n    });\r\n  }\r\n  //funcion que editará el campo horasExtra y HorasTrabajadas del registro cuando se acepte\r\n  // o se rechace una justificación\r\n  onUpdateDataJust(edit: any): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const id = edit.id;\r\n        const data = { id, ...edit };\r\n        const result = this.datasCollection.doc(edit.id).update(data);\r\n        resolve(result);\r\n      } catch (error) {\r\n        reject(error.message);\r\n      }\r\n    });\r\n  }\r\n  //función para obtener todos los campos de la colección \"registros\"\r\n  getDatas(): void {\r\n    //se obtiene el observable de data\r\n    this.data$ = this.datasCollection\r\n      .snapshotChanges()\r\n      .pipe(map((actions) => actions.map((a) => a.payload.doc.data() as Data)));\r\n  }\r\n  //Se obtienen los documentos que coincidan con el argumento \"userId\" de la colección \"registros\"\r\n  getDataId(userId: string): void {\r\n    this.datasCollectionById = this.afs.collection<Data>('registros', (ref) => {\r\n      return ref\r\n        .orderBy('hora', 'desc')\r\n        .where('idUsuario', '==', userId)\r\n        .limit(300);\r\n    });\r\n    //Se obtienen todos los usuarios\r\n    this.dataById$ = this.datasCollectionById\r\n      .snapshotChanges()\r\n      .pipe(map((actions) => actions.map((a) => a.payload.doc.data() as Data)));\r\n  }\r\n  getData(Id: string): void {\r\n    this.datasCollectionById = this.afs.collection<Data>('registros', (ref) => {\r\n      return ref.orderBy('hora', 'desc').where('id', '==', Id).limit(300);\r\n    });\r\n    //Se obtienen todos los usuarios\r\n    this.dataById$ = this.datasCollectionById\r\n      .snapshotChanges()\r\n      .pipe(map((actions) => actions.map((a) => a.payload.doc.data() as Data)));\r\n  }\r\n}\r\n","import { DataService } from './data.service';\r\nimport { Justification, status } from '../../models/justification.interface';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  AngularFirestore,\r\n  AngularFirestoreCollection,\r\n} from '@angular/fire/firestore';\r\nimport { map } from 'rxjs/operators';\r\nimport { Data } from '../../models/data.interface';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JustificationService {\r\n  //observable en donde estarán las justificaciones obtenidos por CloudFirestore\r\n  //se almacenarán todas las justificaciones (para el rol Administrador)\r\n  justification$: Observable<Justification[]>;\r\n  //observable en donde estarán los datos obtenidos por CloudFirestore\r\n  //se almacenarán las justificaciones de un determinado usuario (para el rol Empleado)\r\n  justificationById$: Observable<Justification[]>;\r\n\r\n  //se crea un objeto para gestionar el acceso al Cloud Firestore\r\n  private justificationsCollection: AngularFirestoreCollection<Justification>;\r\n  //se crea un objeto para gestionar el acceso al Cloud Firestore\r\n  //se realizará una consulta de justificaciones en base al id de usuario\r\n  private justificationsCollectionById: AngularFirestoreCollection<Justification>;\r\n\r\n  //Constructor: se declara el servicio AngularFirestore para acceder a las características de\r\n  //Cloud Firestore y el servicio Data para actualizar la informacion de registros\r\n  constructor(\r\n    private readonly afs: AngularFirestore,\r\n    private dataSvc: DataService\r\n  ) {\r\n    this.justificationsCollection = this.afs.collection<Justification>(\r\n      'justificaciones',\r\n      (ref) => ref.orderBy('fecha', 'desc')\r\n    );\r\n  }\r\n\r\n  //función para editar el campo \"horaJustificada\"\r\n  editJustification(\r\n    just: Justification,\r\n    justId: string,\r\n    state: status,\r\n    horaE: String\r\n  ): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const id = justId;\r\n        const status = state;\r\n        just.status = state;\r\n        const data = { id, ...just, horaJustificada: horaE + ':00' };\r\n        const result = this.justificationsCollection.doc(id).set(data);\r\n        resolve(result);\r\n      } catch (error) {\r\n        reject(error.message);\r\n      }\r\n    });\r\n  }\r\n  //función para crear una nueva justificación.\r\n  onSaveJustification(\r\n    justificacion: Justification,\r\n    dataEdit: Data\r\n  ): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const id = this.afs.createId() + justificacion.tipo;\r\n        const { usuario } = dataEdit;\r\n        const dataJustific = { id, ...justificacion, usuario };\r\n        const result = this.justificationsCollection.doc(id).set(dataJustific);\r\n        this.dataSvc.onEditDataJust(dataEdit, id);\r\n        resolve(result);\r\n      } catch (error) {\r\n        reject(error.message);\r\n      }\r\n    });\r\n  }\r\n  //en el caso de que se de click en el botón \"Aceptar\" su status será a ACEPTADO\r\n  onAccept(item: Justification, horaE: String, flag: boolean): void {\r\n    try {\r\n      const justificationId = item?.id || null;\r\n      this.editJustification(item, justificationId, 'ACEPTADO', horaE);\r\n      if (horaE != '') {\r\n        if (flag) {\r\n          const data = {\r\n            id: item.idRegistro,\r\n            horasExtra: horaE + ':00',\r\n          };\r\n          this.dataSvc.onUpdateDataJust(data);\r\n        }\r\n      }\r\n    } catch (error) {}\r\n  }\r\n  //en el caso de que se de click en el botón \"Rechazar\" su status será a RECHAZADO\r\n  onReject(item: Justification): void {\r\n    try {\r\n      if (item.tipo == 'FALTA') {\r\n        const data = {\r\n          id: item.idRegistro,\r\n          horasTrabajadas: '00:00:00',\r\n        };\r\n        this.dataSvc.onUpdateDataJust(data);\r\n      }\r\n      if (item.tipo == 'HORAS_EXTRA') {\r\n        const data = {\r\n          id: item.idRegistro,\r\n          horasExtra: '00:00:00',\r\n        };\r\n        this.dataSvc.onUpdateDataJust(data);\r\n      }\r\n      const justificationId = item?.id || null;\r\n      this.editJustification(item, justificationId, 'RECHAZADO', '0:00');\r\n    } catch (error) {}\r\n  }\r\n  //función para obtener todos los campos de la colección \"justificaciones\"\r\n  getJustifications(): void {\r\n    //se define el nombre de la colección que se leerá en el Cloud Firestore\r\n\r\n    this.justification$ = this.justificationsCollection\r\n      .snapshotChanges()\r\n      .pipe(\r\n        map((actions) =>\r\n          actions.map((a) => a.payload.doc.data() as Justification)\r\n        )\r\n      );\r\n  }\r\n  //Se obtienen los documentos que coincidan con el argumento \"userId\"\r\n  getJustId(userId: string): void {\r\n    this.justificationsCollectionById = this.afs.collection<Justification>(\r\n      'justificaciones',\r\n      (ref) => {\r\n        return ref.where('idUsuario', '==', userId).orderBy('fecha', 'desc');\r\n      }\r\n    );\r\n    //Se obtienen todos los usuarios\r\n    this.justificationById$ = this.justificationsCollectionById\r\n      .snapshotChanges()\r\n      .pipe(\r\n        map((actions) =>\r\n          actions.map((a) => a.payload.doc.data() as Justification)\r\n        )\r\n      );\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}